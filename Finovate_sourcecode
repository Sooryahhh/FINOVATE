import { useState, useEffect } from 'react';
import { Button } from "/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "/components/ui/card";
import { ArrowRight, Clock, Users, Home, Search, Calendar, TrendingUp, RefreshCw, Banknote, Upload } from "lucide-react";
import {
  LineChart,
  Line,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer
} from 'recharts';

// Type Definitions
interface Transaction {
  id: number | string;
  date: string;
  description: string;
  amount: number;
  category: string;
}

interface FinancialInstitution {
  id: string;
  name: string;
  logo: string;
}

interface ForecastData {
  month: string;
  predicted: number;
  optimistic: number;
  pessimistic: number;
}

// Sample Data
const sampleData = [
  { name: 'Jan', revenue: 4000, expenses: 2400, profit: 1600 },
  { name: 'Feb', revenue: 3000, expenses: 1398, profit: 1602 },
  { name: 'Mar', revenue: 9800, expenses: 2000, profit: 7800 },
  { name: 'Apr', revenue: 3908, expenses: 2780, profit: 1128 },
  { name: 'May', revenue: 4800, expenses: 1890, profit: 2910 },
  { name: 'Jun', revenue: 3800, expenses: 2390, profit: 1410 },
];

const forecastData: ForecastData[] = [
  { month: 'Jul', predicted: 4200, optimistic: 5000, pessimistic: 3500 },
  { month: 'Aug', predicted: 4500, optimistic: 5500, pessimistic: 3800 },
  { month: 'Sep', predicted: 4800, optimistic: 6000, pessimistic: 4000 },
  { month: 'Oct', predicted: 5200, optimistic: 6500, pessimistic: 4500 },
];

const initialTransactions: Transaction[] = [
  { id: 1, date: '2023-06-01', description: 'Office Supplies', amount: 120.50, category: 'Supplies' },
  { id: 2, date: '2023-06-02', description: 'Client Payment', amount: 2500.00, category: 'Revenue' },
  { id: 3, date: '2023-06-03', description: 'Software Subscription', amount: 99.00, category: 'Technology' },
  { id: 4, date: '2023-06-04', description: 'Marketing Services', amount: 450.00, category: 'Marketing' },
  { id: 5, date: '2023-06-05', description: 'Consulting Fee', amount: 1800.00, category: 'Revenue' },
];

const supportedInstitutions: FinancialInstitution[] = [
  { id: 'chase', name: 'Chase Bank', logo: 'chase-logo' },
  { id: 'bankofamerica', name: 'Bank of America', logo: 'boa-logo' },
  { id: 'wellsfargo', name: 'Wells Fargo', logo: 'wells-logo' },
  { id: 'stripe', name: 'Stripe', logo: 'stripe-logo' },
  { id: 'paypal', name: 'PayPal', logo: 'paypal-logo' },
];

export default function FinovateDashboard() {
  const [activeTab, setActiveTab] = useState<'dashboard' | 'transactions' | 'forecasting' | 'connections'>('dashboard');
  const [transactions, setTransactions] = useState<Transaction[]>(initialTransactions);
  const [newTransaction, setNewTransaction] = useState({
    description: '',
    amount: '',
    category: ''
  });
  const [isLoading, setIsLoading] = useState(false);
  const [connectedAccounts, setConnectedAccounts] = useState<string[]>([]);
  const [lastUpdated, setLastUpdated] = useState(new Date());
  const [syncStatus, setSyncStatus] = useState('Up to date');
  const [error, setError] = useState<string | null>(null);

  // Calculate financial metrics
  const totalRevenue = transactions
    .filter(t => t.category === 'Revenue')
    .reduce((sum, t) => sum + t.amount, 0);

  const totalExpenses = transactions
    .filter(t => t.category !== 'Revenue')
    .reduce((sum, t) => sum + t.amount, 0);

  const profit = totalRevenue - totalExpenses;

  // Simulate real-time updates
  useEffect(() => {
    const interval = setInterval(() => {
      setLastUpdated(new Date());
    }, 60000);
    
    return () => clearInterval(interval);
  }, []);

  const handleAddTransaction = () => {
    if (!newTransaction.description || !newTransaction.amount) {
      setError('Description and amount are required');
      return;
    }

    const transaction: Transaction = {
      id: Date.now(),
      date: new Date().toISOString().split('T')[0],
      description: newTransaction.description,
      amount: parseFloat(newTransaction.amount),
      category: newTransaction.category || 'Uncategorized'
    };

    setTransactions([...transactions, transaction]);
    setNewTransaction({ description: '', amount: '', category: '' });
    setError(null);
    setSyncStatus('Transaction added');
    setLastUpdated(new Date());
  };

  const handleCSVUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setIsLoading(true);
    setSyncStatus('Processing CSV file...');

    // Simulate CSV processing
    setTimeout(() => {
      try {
        const newTransactions = [
          ...transactions,
          { 
            id: Date.now() + 1, 
            date: new Date().toISOString().split('T')[0],
            description: 'CSV Import: Office Rent', 
            amount: 1200.00, 
            category: 'Rent' 
          },
          { 
            id: Date.now() + 2, 
            date: new Date().toISOString().split('T')[0],
            description: 'CSV Import: Client Payment', 
            amount: 3500.00, 
            category: 'Revenue' 
          }
        ];
        
        setTransactions(newTransactions);
        setSyncStatus('CSV imported successfully');
        setLastUpdated(new Date());
      } catch (err) {
        setError('Failed to process CSV file');
        setSyncStatus('CSV import failed');
      } finally {
        setIsLoading(false);
      }
    }, 1500);
  };

  const connectBankAccount = async (institutionId: string) => {
    if (connectedAccounts.includes(institutionId)) return;

    setIsLoading(true);
    setSyncStatus(`Connecting to ${institutionId}...`);
    setError(null);

    try {
      const newTransactions = await fetchBankTransactions(institutionId) as Transaction[];
      setTransactions(prev => [...prev, ...newTransactions]);
      setConnectedAccounts(prev => [...prev, institutionId]);
      setSyncStatus('Sync completed successfully');
      setLastUpdated(new Date());
    } catch (err) {
      setError(`Failed to connect to ${institutionId}`);
      setSyncStatus('Connection failed');
    } finally {
      setIsLoading(false);
    }
  };

  const refreshData = async () => {
    setIsLoading(true);
    setSyncStatus('Refreshing data...');
    setError(null);

    try {
      // Simulate API refresh
      await new Promise(resolve => setTimeout(resolve, 1000));
      setSyncStatus('Data refreshed successfully');
      setLastUpdated(new Date());
    } catch (err) {
      setError('Failed to refresh data');
      setSyncStatus('Refresh failed');
    } finally {
      setIsLoading(false);
    }
  };

  // Mock API function
  const fetchBankTransactions = async (institution: string): Promise<Transaction[]> => {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve([
          { 
            id: Date.now() + Math.random(), 
            date: new Date().toISOString().split('T')[0],
            description: `POS Purchase ${institution}`, 
            amount: 45.99, 
            category: 'Expense' 
          },
          { 
            id: Date.now() + Math.random(), 
            date: new Date().toISOString().split('T')[0],
            description: `Deposit ${institution}`, 
            amount: 1200.00, 
            category: 'Revenue' 
          }
        ]);
      }, 1000);
    });
  };

  return (
    <div className="min-h-screen bg-slate-50">
      {/* Header */}
      <header className="bg-gradient-to-r from-indigo-900 to-purple-800 text-white p-4 shadow-md">
        <div className="container mx-auto flex justify-between items-center">
          <div className="flex items-center space-x-2">
            <TrendingUp className="h-6 w-6" />
            <div>
              <h1 className="text-xl font-bold">FINOVATE</h1>
              <p className="text-xs opacity-80">Track. Predict. Thrive.</p>
            </div>
          </div>
          <div className="hidden md:flex items-center space-x-4">
            <div className={`text-sm px-3 py-1 rounded-full flex items-center ${
              error ? 'bg-red-500' : 'bg-indigo-700'
            }`}>
              <RefreshCw className={`h-4 w-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />
              <span>
                {error || syncStatus} â€¢ {lastUpdated.toLocaleTimeString()}
              </span>
            </div>
            <nav className="flex space-x-6">
              <button 
                onClick={() => setActiveTab('dashboard')}
                className={`px-3 py-2 rounded-md ${activeTab === 'dashboard' ? 'bg-indigo-700' : 'hover:bg-indigo-800'}`}
              >
                Dashboard
              </button>
              <button 
                onClick={() => setActiveTab('transactions')}
                className={`px-3 py-2 rounded-md ${activeTab === 'transactions' ? 'bg-indigo-700' : 'hover:bg-indigo-800'}`}
              >
                Transactions
              </button>
              <button 
                onClick={() => setActiveTab('forecasting')}
                className={`px-3 py-2 rounded-md ${activeTab === 'forecasting' ? 'bg-indigo-700' : 'hover:bg-indigo-800'}`}
              >
                Forecasting
              </button>
              <button 
                onClick={() => setActiveTab('connections')}
                className={`px-3 py-2 rounded-md ${activeTab === 'connections' ? 'bg-indigo-700' : 'hover:bg-indigo-800'}`}
              >
                Connections
              </button>
            </nav>
          </div>
          <div className="flex items-center space-x-4">
            <button 
              className="p-2 rounded-full hover:bg-indigo-800" 
              onClick={refreshData}
              disabled={isLoading}
            >
              <RefreshCw className={`h-5 w-5 ${isLoading ? 'animate-spin' : ''}`} />
            </button>
          </div>
        </div>
      </header>

      {/* Mobile Navigation */}
      <div className="md:hidden bg-indigo-800 text-white p-2">
        <div className="flex justify-around">
          <button 
            onClick={() => setActiveTab('dashboard')}
            className={`px-3 py-2 rounded-md ${activeTab === 'dashboard' ? 'bg-indigo-700' : ''}`}
          >
            <Home className="h-5 w-5 mx-auto" />
          </button>
          <button 
            onClick={() => setActiveTab('transactions')}
            className={`px-3 py-2 rounded-md ${activeTab === 'transactions' ? 'bg-indigo-700' : ''}`}
          >
            <Clock className="h-5 w-5 mx-auto" />
          </button>
          <button 
            onClick={() => setActiveTab('forecasting')}
            className={`px-3 py-2 rounded-md ${activeTab === 'forecasting' ? 'bg-indigo-700' : ''}`}
          >
            <Users className="h-5 w-5 mx-auto" />
          </button>
          <button 
            onClick={() => setActiveTab('connections')}
            className={`px-3 py-2 rounded-md ${activeTab === 'connections' ? 'bg-indigo-700' : ''}`}
          >
            <Banknote className="h-5 w-5 mx-auto" />
          </button>
        </div>
      </div>

      <main className="container mx-auto p-4">
        {/* Status Bar (Mobile) */}
        <div className="md:hidden mb-4 p-2 rounded text-sm flex items-center ${
          error ? 'bg-red-100 text-red-800' : 'bg-indigo-100 text-indigo-800'
        }">
          <RefreshCw className={`h-4 w-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />
          <span>{error || syncStatus} â€¢ {lastUpdated.toLocaleTimeString()}</span>
        </div>

        {/* Dashboard Tab */}
        {activeTab === 'dashboard' && (
          <div className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Total Revenue</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-3xl font-bold text-green-600">${totalRevenue.toLocaleString()}</p>
                  <p className="text-sm text-gray-500 mt-2">Updated: {lastUpdated.toLocaleTimeString()}</p>
                </CardContent>
              </Card>
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Total Expenses</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-3xl font-bold text-red-600">${totalExpenses.toLocaleString()}</p>
                  <p className="text-sm text-gray-500 mt-2">Updated: {lastUpdated.toLocaleTimeString()}</p>
                </CardContent>
              </Card>
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Profit</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-3xl font-bold text-purple-600">${profit.toLocaleString()}</p>
                  <p className="text-sm text-gray-500 mt-2">Updated: {lastUpdated.toLocaleTimeString()}</p>
                </CardContent>
              </Card>
            </div>

            <Card>
              <CardHeader>
                <CardTitle>Financial Overview</CardTitle>
                <CardDescription>Last updated: {lastUpdated.toLocaleString()}</CardDescription>
              </CardHeader>
              <CardContent className="h-80">
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart data={sampleData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Line type="monotone" dataKey="revenue" stroke="#8884d8" activeDot={{ r: 8 }} />
                    <Line type="monotone" dataKey="expenses" stroke="#82ca9d" />
                    <Line type="monotone" dataKey="profit" stroke="#ffc658" />
                  </LineChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Card>
                <CardHeader>
                  <CardTitle>AI Insights</CardTitle>
                  <CardDescription>Powered by FINOVATE Intelligence</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="p-4 bg-indigo-50 rounded-lg">
                      <h3 className="font-medium text-indigo-800">Revenue Growth</h3>
                      <p className="text-sm text-gray-600">Your revenue is growing at a healthy rate of 12% month-over-month.</p>
                    </div>
                    <div className="p-4 bg-purple-50 rounded-lg">
                      <h3 className="font-medium text-purple-800">Expense Alert</h3>
                      <p className="text-sm text-gray-600">Your technology expenses have increased by 22% this month.</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
              <Card>
                <CardHeader>
                  <CardTitle>Recent Transactions</CardTitle>
                  <CardDescription>Showing latest transactions</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    {transactions.slice(0, 4).map(transaction => (
                      <div key={transaction.id} className="flex justify-between items-center p-2 hover:bg-gray-50 rounded">
                        <div>
                          <p className="font-medium">{transaction.description}</p>
                          <p className="text-sm text-gray-500">{transaction.date} â€¢ {transaction.category}</p>
                        </div>
                        <p className={`font-medium ${
                          transaction.category === 'Revenue' ? 'text-green-600' : 'text-red-600'
                        }`}>
                          {transaction.category === 'Revenue' ? '+' : '-'}${transaction.amount.toFixed(2)}
                        </p>
                      </div>
                    ))}
                  </div>
                  <Button 
                    variant="ghost" 
                    className="mt-4 text-indigo-600" 
                    onClick={() => setActiveTab('transactions')}
                  >
                    View All Transactions <ArrowRight className="ml-2 h-4 w-4" />
                  </Button>
                </CardContent>
              </Card>
            </div>
          </div>
        )}

        {/* Transactions Tab */}
        {activeTab === 'transactions' && (
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Transaction Management</CardTitle>
                <CardDescription>Add and categorize your financial data</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {error && (
                    <div className="p-2 bg-red-100 text-red-800 rounded text-sm">
                      {error}
                    </div>
                  )}
                  <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                    <div className="md:col-span-3 space-y-2">
                      <label className="block text-sm font-medium text-gray-700">Description</label>
                      <input
                        type="text"
                        className="w-full p-2 border rounded"
                        value={newTransaction.description}
                        onChange={(e) => setNewTransaction({
                          ...newTransaction,
                          description: e.target.value
                        })}
                        placeholder="Enter transaction description"
                      />
                    </div>
                    <div className="space-y-2">
                      <label className="block text-sm font-medium text-gray-700">Amount</label>
                      <input
                        type="number"
                        className="w-full p-2 border rounded"
                        value={newTransaction.amount}
                        onChange={(e) => setNewTransaction({
                          ...newTransaction,
                          amount: e.target.value
                        })}
                        placeholder="0.00"
                      />
                    </div>
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                    <div className="space-y-2">
                      <label className="block text-sm font-medium text-gray-700">Category</label>
                      <select
                        className="w-full p-2 border rounded"
                        value={newTransaction.category}
                        onChange={(e) => setNewTransaction({
                          ...newTransaction,
                          category: e.target.value
                        })}
                      >
                        <option value="">Select category</option>
                        <option value="Revenue">Revenue</option>
                        <option value="Supplies">Supplies</option>
                        <option value="Technology">Technology</option>
                        <option value="Marketing">Marketing</option>
                        <option value="Utilities">Utilities</option>
                      </select>
                    </div>
                    <div className="md:col-span-3 flex items-end space-x-2">
                      <Button 
                        onClick={handleAddTransaction}
                        disabled={isLoading}
                      >
                        Add Transaction
                      </Button>
                      <label className="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground shadow hover:bg-primary/90 h-9 px-4 py-2 cursor-pointer">
                        <Upload className="h-4 w-4 mr-2" />
                        CSV Import
                        <input 
                          type="file" 
                          className="hidden" 
                          accept=".csv" 
                          onChange={handleCSVUpload} 
                        />
                      </label>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Transaction History</CardTitle>
                <CardDescription>Last updated: {lastUpdated.toLocaleString()}</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {transactions.map((transaction) => (
                        <tr key={transaction.id} className="hover:bg-gray-50">
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {transaction.date}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                            {transaction.description}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {transaction.category}
                          </td>
                          <td className={`px-6 py-4 whitespace-nowrap text-sm font-medium ${
                            transaction.category === 'Revenue' ? 'text-green-600' : 'text-red-600'
                          }`}>
                            {transaction.category === 'Revenue' ? '+' : '-'}${transaction.amount.toFixed(2)}
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {/* Forecasting Tab */}
        {activeTab === 'forecasting' && (
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Revenue Forecast</CardTitle>
                <CardDescription>AI-powered predictions for the next 4 months</CardDescription>
              </CardHeader>
              <CardContent className="h-80">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart data={forecastData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="month" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Bar dataKey="predicted" fill="#8884d8" name="Predicted" />
                    <Bar dataKey="optimistic" fill="#82ca9d" name="Optimistic" />
                    <Bar dataKey="pessimistic" fill="#ffc658" name="Pessimistic" />
                  </BarChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Card>
                <CardHeader>
                  <CardTitle>Growth Recommendations</CardTitle>
                  <CardDescription>Actionable insights</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="p-4 bg-indigo-50 rounded-lg">
                      <h3 className="font-medium text-indigo-800">Marketing Expansion</h3>
                      <p className="text-sm text-gray-600">Increasing marketing spend by 15% could boost revenue by 22%.</p>
                    </div>
                    <div className="p-4 bg-purple-50 rounded-lg">
                      <h3 className="font-medium text-purple-800">Cost Optimization</h3>
                      <p className="text-sm text-gray-600">Review technology subscriptions for potential savings.</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
              <Card>
                <CardHeader>
                  <CardTitle>Cash Flow Projection</CardTitle>
                  <CardDescription>Predicted monthly revenue</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    {forecastData.map((month) => (
                      <div key={month.month} className="flex justify-between items-center p-2 hover:bg-gray-50 rounded">
                        <div>
                          <p className="font-medium">{month.month}</p>
                          <p className="text-sm text-gray-500">Projected Revenue</p>
                        </div>
                        <div className="text-right">
                          <p className="font-medium text-purple-600">
                            ${month.predicted.toLocaleString()}
                          </p>
                          <p className="text-xs text-gray-500">
                            Range: ${month.pessimistic.toLocaleString()} - ${month.optimistic.toLocaleString()}
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        )}

        {/* Connections Tab */}
        {activeTab === 'connections' && (
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Connect Financial Accounts</CardTitle>
                <CardDescription>Automatically sync your transactions</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {supportedInstitutions.map((institution) => (
                    <Card 
                      key={institution.id}
                      className={`hover:shadow-lg transition-shadow ${
                        connectedAccounts.includes(institution.id) ? 'border-green-500' : ''
                      }`}
                    >
                      <CardContent className="p-6 flex flex-col items-center">
                        <div className="bg-gray-200 border-2 border-dashed rounded-xl w-16 h-16 mb-4" />
                        <h3 className="text-lg font-medium">{institution.name}</h3>
                        <Button 
                          variant={connectedAccounts.includes(institution.id) ? 'default' : 'outline'}
                          className="mt-4 w-full"
                          onClick={() => connectBankAccount(institution.id)}
                          disabled={connectedAccounts.includes(institution.id) || isLoading}
                        >
                          {connectedAccounts.includes(institution.id) ? 'Connected' : 'Connect'}
                        </Button>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Manual Import Options</CardTitle>
                <CardDescription>Alternative ways to import data</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="border rounded-lg p-4">
                    <h3 className="font-medium flex items-center">
                      <Upload className="h-5 w-5 mr-2" />
                      CSV File Import
                    </h3>
                    <p className="text-sm text-gray-600 mt-2">
                      Upload your bank statements in CSV format
                    </p>
                    <label className="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground shadow hover:bg-primary/90 h-9 px-4 py-2 mt-4 cursor-pointer">
                      <Upload className="h-4 w-4 mr-2" />
                      Select CSV File
                      <input 
                        type="file" 
                        className="hidden" 
                        accept=".csv" 
                        onChange={handleCSVUpload} 
                      />
                    </label>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        )}
      </main>

      <footer className="bg-gradient-to-r from-indigo-900 to-purple-800 text-white p-4 mt-8">
        <div className="container mx-auto text-center">
          <div className="flex items-center justify-center space-x-2 mb-2">
            <TrendingUp className="h-5 w-5" />
            <span className="font-bold">FINOVATE</span>
          </div>
          <p className="text-xs opacity-80">Track. Predict. Thrive.</p>
          <p className="text-xs mt-4 opacity-60">
            Â© {new Date().getFullYear()} FINOVATE. All rights reserved.
          </p>
        </div>
      </footer>
    </div>
  );
}
